// (function _Logger_s_() {
//
// 'use strict';
//
// // require
//
// const _global = _global_;
// const _ = _global_.wTools;
// const Parent = _.Logger;
// const Self = _.Logger;
//
// //
//
// function _wrapProtoHandler( methodName, originalMethod, proto )
// {
//
//   debugger;
//   return function()
//   {
//     debugger;
//     logger.logUp( proto.constructor.name + '.' + methodName,'(','with',arguments.length,'arguments',')' );
//     let result = originalMethod.apply( this,arguments );
//     logger.logDown();
//     return result;
//   }
//
// }
//
// //
//
// function wrapProto( proto,o )
// {
//   let self = this;
//   let o = o || {};
//
//   _.assert( _.object.isBasic( proto ) || _.routineIs( proto ) );
//
//   if( proto.constructor.wrappedByLogger )
//   return;
//
//   proto.constructor.wrappedByLogger = true;
//
//   console.log( 'wrapProto :',proto.constructor.name );
//
//   let methods = o.methods || proto;
//   for( let r in methods )
//   {
//
//     if( r === 'constructor' )
//     continue;
//
//     let descriptor = Object.getOwnPropertyDescriptor( proto,r );
//
//     if( !descriptor )
//     continue;
//
//     if( !descriptor.configurable )
//     continue;
//
//     let routine = proto[ r ];
//
//     if( !_.routineIs( routine ) )
//     continue;
//
//     proto[ r ] = _wrapProtoHandler( r,routine,proto );
//     proto[ r ].original = routine;
//
//   }
//
// }
//
// //
//
// function unwrapProto( proto )
// {
//   let self = this;
//   let o = o || {};
//
//   _.assert( _.object.isBasic( proto ) || _.routineIs( proto ) );
//
//   if( !proto.constructor.wrappedByLogger )
//   return;
//
//   proto.constructor.wrappedByLogger = false;
//
//   console.log( 'unwrapProto :',proto.constructor.name );
//
//   let methods = o.methods || proto;
//   for( let r in methods )
//   {
//
//     if( r === 'constructor' )
//     continue;
//
//     let descriptor = Object.getOwnPropertyDescriptor( proto,r );
//
//     if( !descriptor )
//     continue;
//
//     if( !descriptor.configurable )
//     {
//       continue;
//     }
//
//     let routine = proto[ r ];
//
//     if( !_.routineIs( routine ) )
//     continue;
//
//     if( !_.routineIs( routine.original ) )
//     continue;
//
//     proto[ r ] = routine.original;
//
//   }
//
// }
//
// //
//
// function _hookConsoleToFileHandler( wasMethod, methodName, fileName )
// {
//
//   return function()
//   {
//
//     let args = arguments;
//
//     wasMethod.apply( console,args );
//
//     const fileProvider = _.FileProvider.Default();
//     if( fileProvider.fileWrite )
//     {
//
//       let strOptions = { levels : 7 };
//       fileProvider.fileWrite
//       ({
//         path : fileName,
//         data : _.entity.exportString( args,strOptions ) + '\n',
//         append : true,
//       });
//
//     }
//
//   };
//
// }
//
// //
//
// function hookConsoleToFile( fileName )
// {
//   let self = this;
//
//   require( 'include/wtools/l2/PathBasic.s' );
//   require( 'include/wtools/UseMid.s' );
//
//   fileName = fileName || 'log.txt';
//   fileName = _.path.join( _.path.realMainDir(),fileName );
//
//   console.log( 'hookConsoleToFile :',fileName );
//
//   for( let i = 0, l = self._methods.length; i < l; i++ )
//   {
//     let m = self._methods[ i ];
//     if( m in console )
//     {
//       let wasMethod = console[ m ];
//       console[ m ] = self._hookConsoleToFileHandler( wasMethod,m,fileName );
//     }
//   }
//
// }
//
// //
//
// function _hookConsoleToAlertHandler( wasMethod, methodName )
// {
//
//   return function()
//   {
//
//     let args = _.arrayAppendArrays( [], [ arguments,_.introspector.stack() ] );
//
//     wasMethod.apply( console,args );
//     alert( args.join( '\n' ) );
//
//   }
//
// }
//
// //
//
// function hookConsoleToAlert()
// {
//   let self = this;
//
//   console.log( 'hookConsoleToAlert' );
//
//   for( let i = 0, l = self._methods.length; i < l; i++ )
//   {
//     let m = self._methods[ i ];
//     if( m in console )
//     {
//       let wasMethod = console[ m ];
//       console[ m ] = self._hookConsoleToAlertHandler( wasMethod,m );
//     }
//   }
//
// }
//
// //
//
// function _hookConsoleToDomHandler( o, wasMethod, methodName )
// {
//
//   return function()
//   {
//
//     wasMethod.apply( console,arguments );
//     let text = [].join.call( arguments,' ' );
//     o.consoleDom.prepend( '<p>' + text + '</p>' );
//
//   }
//
// }
//
// //
//
// function hookConsoleToDom( o )
// {
//   let self = this;
//   let o = o || {};
//   let $ = jQuery;
//
//   _.process.ready( function()
//   {
//
//     if( !o.dom )
//     o.dom = $( document.body );
//
//     let consoleDom = o.consoleDom = $( '<div>' ).appendTo( o.dom );
//     consoleDom.css
//     ({
//       'display' : 'block',
//       'position' : 'absolute',
//       'bottom' : '0',
//       'width' : '100%',
//       'height' : '50%',
//       'z-index' : '10000',
//       'background-color' : 'rgba( 255,0,0,0.1 )',
//       'overflow-x' : 'hidden',
//       'overflow-y' : 'auto',
//       'padding' : '1em',
//     });
//
//     console.log( 'hookConsoleToDom' );
//
//     for( let i = 0, l = self._methods.length; i < l; i++ )
//     {
//       let m = self._methods[ i ];
//       if( m in console )
//       {
//         let wasMethod = console[ m ];
//         console[ m ] = self._hookConsoleToDomHandler( o,wasMethod,m );
//       }
//     }
//
//   });
//
// }
//
// //
//
// function _hookConsoleToServerSend( o, data )
// {
//   let self = this;
//
//   let request = $.ajax
//   ({
//     url : o.url,
//     crossDomain : true,
//     method : 'post',
//     /*dataType : 'json',*/
//     data : JSON.stringify( data ),
//     error : _.routineJoin_( self,self.unhookConsole,[ false ] ),
//   });
//
// }
//
// //
//
// function _hookConsoleToServerHandler( o, originalMethod, methodName )
// {
//   let self = this;
//
//   return function()
//   {
//
//     originalMethod.apply( console,arguments );
//     let text = [].join.call( arguments,' ' );
//     let data = {};
//     data.text = text;
//     data.way = 'message';
//     data.method = methodName;
//     data.o = o;
//
//     self._hookConsoleToServerSend( o,data );
//
//   }
//
// }
//
// //
//
// function hookConsoleToServer( o )
// {
//   let self = this;
//
//   if( console._hook )
//   return;
//
//   console._hook = 'hookConsoleToServer';
//
//   // let
//
//   let $ = jQuery;
//   let o = o || {};
//   let optionsDefault =
//   {
//     url : null,
//     id : null,
//     pathname : '/log',
//   }
//
//   throw _.err( 'not tested' );
//
//   _.map.assertHasOnly( o,optionsDefault,_.uri.str.components );
//   _.props.supplement( o,optionsDefault );
//
//   if( !o.url )
//   o.url = _.uri.for( o );
//
//   if( !o.id )
//   o.id = _.intRandom( 1 << 30 );
//
//   console.log( 'hookConsoleToServer :',o.url );
//
//   //
//
//   for( let i = 0, l = self._methods.length; i < l; i++ )
//   {
//     let m = self._methods[ i ];
//     if( m in console )
//     {
//       let originalMethod = console[ m ];
//       console[ m ] = self._hookConsoleToServerHandler( o,originalMethod,m );
//       console[ m ].original = originalMethod;
//     }
//   }
//
//   // handshake
//
//   let data = {};
//   data.way = 'handshake';
//   data.o = o;
//
//   self._hookConsoleToServerSend( o,data );
//
// }
//
// //
//
// function unhookConsole( force )
// {
//   let self = this;
//
//   if( !console._hook && !force )
//   return;
//
//   console._hook = false;
//   console.log( 'unhookConsole :' );
//
//   for( let i = 0, l = self._methods.length; i < l; i++ )
//   {
//     let m = self._methods[ i ];
//     if( m in console )
//     {
//       _.assert( _.routineIs( console[ m ].original ) );
//       console[ m ] = console[ m ].original;
//     }
//   }
//
// }
//
// //
//
// let _methods =
// [
//   'log', 'assert', 'clear', 'count',
//   'debug', 'dir', 'dirxml', 'error',
//   'exception', 'group', 'groupCollapsed',
//   'groupEnd', 'info', 'profile', 'profileEnd',
//   'table', 'time', 'timeEnd', 'timeStamp',
//   'trace', 'warn'
// ];
//
// // --
// // relations
// // --
//
// let Composes =
// {
// }
//
// let Aggregates =
// {
// }
//
// let Associates =
// {
// }
//
// // --
// // declare
// // --
//
// let Proto =
// {
//
//   _wrapProtoHandler,
//   wrapProto,
//   unwrapProto,
//
//   _hookConsoleToFileHandler,
//   hookConsoleToFile,
//
//   _hookConsoleToAlertHandler,
//   hookConsoleToAlert,
//
//   _hookConsoleToDomHandler,
//   hookConsoleToDom,
//
//   _hookConsoleToServerSend,
//   _hookConsoleToServerHandler,
//   hookConsoleToServer,
//
//   unhookConsole,
//
//   // let
//
//   _methods,
//
//   // relations
//
//
//   Composes,
//   Aggregates,
//   Associates,
//
// }
//
// //
//
// _.classExtend( Self, Proto );
//
// // --
// // export
// // --
//
// if( typeof module !== 'undefined' )
// module[ 'exports' ] = Self;
//
// })();
